{"version":3,"sources":["components/DisplayCard/DisplayCard.js","components/Jumbotron/Jumbotron.js","components/Wrapper/Wrapper.js","App.js","index.js"],"names":["DisplayCard","props","react_default","a","createElement","onClick","setClicked","id","className","alt","name","src","image","Jumbotron","_ref","children","style","height","clear","paddingTop","textAlign","Wrapper","correctGuesses","bestScore","clickMessage","App","state","cards","_this","clickedCard","filter","card","clicked","console","log","i","length","setState","sort","b","Math","random","_this2","this","components_Wrapper_Wrapper","components_Jumbotron_Jumbotron","map","components_DisplayCard_DisplayCard","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"02BAaeA,SATK,SAAAC,GAAK,OACvBC,EAAAC,EAAAC,cAAA,OAAKC,QAAS,kBAAMJ,EAAMK,WAAWL,EAAMM,KAAKC,UAAU,QACxDN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACbN,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCKxBC,SATG,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OAChBb,EAAAC,EAAAC,cAAA,OACEY,MAAO,CAAEC,OAAQ,IAAKC,MAAO,OAAQC,WAAY,GAAIC,UAAW,UAChEZ,UAAU,aAETO,KCHUM,SAFC,SAAApB,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WAAWP,EAAMc,mBCKrDO,SAAiB,GACjBC,EAAY,EACZC,EAAe,6EAiIJC,6MA5HbC,MAAQ,CACNC,QACAL,iBACAC,YACAC,kBAGFlB,WAAa,SAAAC,GAGX,IAAMoB,EAAQC,EAAKF,MAAMC,MAGnBE,EAAcF,EAAMG,OAAO,SAAAC,GAAI,OAAIA,EAAKxB,KAAOA,IAGrD,GAAIsB,EAAY,GAAGG,QAAS,CAE1BC,QAAQC,IAAI,oBAAsBZ,GAClCW,QAAQC,IAAI,eAAiBX,GAE7BD,EAAiB,EACjBE,EAAe,6CAEf,IAAK,IAAIW,EAAI,EAAGA,EAAIR,EAAMS,OAAQD,IAChCR,EAAMQ,GAAGH,SAAU,EAGrBJ,EAAKS,SAAS,CAAEb,iBAChBI,EAAKS,SAAS,CAAEf,mBAChBM,EAAKS,SAAS,CAAEV,eAGX,GAAIL,EAAiB,GAG1BO,EAAY,GAAGG,SAAU,EAKzBR,EAAe,4CAFfF,EAIqBC,IACnBA,EAAYD,EACZM,EAAKS,SAAS,CAAEd,eAIlBI,EAAMW,KAAK,SAAUnC,EAAGoC,GAAK,MAAO,GAAMC,KAAKC,WAG/Cb,EAAKS,SAAS,CAAEV,UAChBC,EAAKS,SAAS,CAAEf,mBAChBM,EAAKS,SAAS,CAAEb,qBACX,CAGLK,EAAY,GAAGG,SAAU,EAGzBV,EAAiB,EAGjBE,EAAe,6BACfD,EAAY,GACZK,EAAKS,SAAS,CAAEd,cAEhB,IAAK,IAAIY,EAAI,EAAGA,EAAIR,EAAMS,OAAQD,IAChCR,EAAMQ,GAAGH,SAAU,EAIrBL,EAAMW,KAAK,SAAUnC,EAAGoC,GAAK,MAAO,GAAMC,KAAKC,WAG/Cb,EAAKS,SAAS,CAAEV,UAChBC,EAAKS,SAAS,CAAEf,mBAChBM,EAAKS,SAAS,CAAEb,2FAMX,IAAAkB,EAAAC,KACP,OAEEzC,EAAAC,EAAAC,cAACwC,EAAD,KAGE1C,EAAAC,EAAAC,cAACyC,EAAD,KACA3C,EAAAC,EAAAC,cAAA,sCAEEF,EAAAC,EAAAC,cAAA,QAAOI,UAAU,gBACZmC,KAAKjB,MAAMF,aACZtB,EAAAC,EAAAC,cAAA,WAFJ,oBAGoBuC,KAAKjB,MAAMJ,eAC7BpB,EAAAC,EAAAC,cAAA,WAJF,eAKeuC,KAAKjB,MAAMH,WAE1BrB,EAAAC,EAAAC,cAAA,YAOCuC,KAAKjB,MAAMC,MAAMmB,IAAI,SAAAf,GAAI,OAExB7B,EAAAC,EAAAC,cAAC2C,EAAD,CACEzC,WAAYoC,EAAKpC,WACjBC,GAAIwB,EAAKxB,GACTyC,IAAKjB,EAAKxB,GACVK,MAAOmB,EAAKnB,kBAnHRqC,mBCPlBC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.a13705bd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./DisplayCard.css\";\n\n\nconst DisplayCard = props => (\n  <div onClick={() => props.setClicked(props.id)} className=\"card\" >\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\n\nexport default DisplayCard;","import React from \"react\";\nimport \"./Jumbotron.css\";\n\nconst Jumbotron = ({ children }) => (\n  <div\n    style={{ height: 180, clear: \"both\", paddingTop: 10, textAlign: \"center\" }}\n    className=\"jumbotron\"\n  >\n    {children}\n  </div>\n);\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React, { Component } from \"react\";\nimport DisplayCard from \"./components/DisplayCard\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Wrapper from \"./components/Wrapper\";\nimport cards from \"./cards.json\";\nimport \"./App.css\";\n\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Click on an image to earn points, but don't click on the same image twice!\";\n\n\nclass App extends Component {\n  // setting this.state.friends to the friends json array\n  state = {\n    cards,\n    correctGuesses,\n    bestScore,\n    clickMessage\n  };\n\n  setClicked = id => {\n\n    // make a copy of the state friends array to work with\n    const cards = this.state.cards;\n\n    // filter for the clicked Friend\n    const clickedCard = cards.filter(card => card.id === id);\n\n    // if the image's clicked value is already true, do the game over actions\n    if (clickedCard[0].clicked) {\n\n      console.log(\"Correct Guesses: \" + correctGuesses);\n      console.log(\"Best Score: \" + bestScore);\n\n      correctGuesses = 0;\n      clickMessage = \"Better luck next time. Thanks for Playing!\"\n\n      for (let i = 0; i < cards.length; i++) {\n        cards[i].clicked = false;\n      }\n\n      this.setState({ clickMessage });\n      this.setState({ correctGuesses });\n      this.setState({ cards });\n\n      // otherwise, if clicked = false, and the user hasn't finished\n    } else if (correctGuesses < 11) {\n\n      // set its value to true\n      clickedCard[0].clicked = true;\n\n      // increment the appropriate counter\n      correctGuesses++;\n\n      clickMessage = \"Just keep swimming! You're doing great!\";\n\n      if (correctGuesses > bestScore) {\n        bestScore = correctGuesses;\n        this.setState({ bestScore });\n      }\n\n      // shuffle the array to be rendered in a random order\n      cards.sort(function (a, b) { return 0.5 - Math.random() });\n\n      // set this.state.friends equal to the new friends array\n      this.setState({ cards });\n      this.setState({ correctGuesses });\n      this.setState({ clickMessage });\n    } else {\n\n      // set its value to true\n      clickedCard[0].clicked = true;\n\n      // restart the guess counter\n      correctGuesses = 0;\n\n      // encourage user to play again\n      clickMessage = \"AWESOME! YOU GOT THEM ALL!\";\n      bestScore = 12;\n      this.setState({ bestScore });\n\n      for (let i = 0; i < cards.length; i++) {\n        cards[i].clicked = false;\n      }\n\n      // shuffle the array to be rendered in a random order\n      cards.sort(function (a, b) { return 0.5 - Math.random() });\n\n      // set this.state.friends equal to the new friends array\n      this.setState({ cards });\n      this.setState({ correctGuesses });\n      this.setState({ clickMessage });\n\n    }\n  };\n\n  // map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n\n      <Wrapper>\n\n\n        <Jumbotron >\n        <h1>Finding Nemo Memory Game</h1>\n\n          <span  className=\"scoreSummary\">\n              {this.state.clickMessage} \n              <hr/>\n            Correct Guesses: {this.state.correctGuesses}\n            <br />\n            Best Score: {this.state.bestScore}\n          </span  >\n          <br />\n      \n        </Jumbotron>\n\n\n        {/* <div className='container'>\n          <div className=\"row\"> */}\n          {this.state.cards.map(card => (\n            \n            <DisplayCard\n              setClicked={this.setClicked}\n              id={card.id}\n              key={card.id}\n              image={card.image}\n            />\n        ))}\n          {/* </div>\n        </div> */}\n\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}